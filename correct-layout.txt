html-полезные ссылки:
Мнемоники(элиментики: © знак охраны авторского права = &copy; &#169 итд) https://ru.wikipedia.org/wiki/%D0%9C%D0%BD%D0%B5%D0%BC%D0%BE%D0%BD%D0%B8%D0%BA%D0%B8_%D0%B2_HTML 
Шпоргалка семантические теги: http://front-end.su/2015/11/01/div-or-section-or-article/


css-генераторы для автоматичкского создания кода стилей:
Гениратор в котором можно сделать тени радиусы и цветовые переходы: cssmatic.com
Гениратор в котором можно сделать позиционирование блоков: howtocenterincss.com
Слова, часто используемые в css-классах: https://github.com/yoksel/common-words


//=======================================================================================================================================||
Конспект важное.
//=======================================================================================================================================||

//---------------------------------------------------------------------------------------------------------------------------------------||
Как работает:
POSITION:

Пример:1.
Родительский блок: position: relative; => Дочерний блок: position: adsolute; 
положение дочернего блока не меняется от положения и изменения размеров родителя.

Пример:2.
position: relative; высчитывает начало координат сразу же от родительского блока!
Побочные эффекты: Если* внутри блока больше одного блока с одинаковыми координатами то они не встанут друг на друга а сьедут
для размещения в таком случае нужно использовать Пример:1.(тогда блоки с одинаковыми координатами наложаться друг на друга).
Можно использовать z-index в такой связке что бы менять расположение блоков один над другим (больше цифра выше блок или блочный элемент).

Пример:3.
position: fixed; фиксирует блок не зависимо то окружающего контента Пример меню которое при прокрутке сайта стоит на месте.
Если* добавляются блоки которые ниже в коде html они имеют z-index выше и будут наезжать на (фиксированное меню) тогда нужно задать
z-index что бы z-index меню всегда был выше чем у астольных блоков сайта!
Внимание! position: нужно использовать как можно реже при верстке испольовать его для фиксации например меню эконок социальных сетей 
или дикораций например подвал в котором есть эконезированные ссылки на соц сети итд.

border-box: border-box; говорит о том что в блочную модель не будут входить padding и рамки. 
Если* "дочерниму" контейнеру задаем ширину 100% а "родитель" при этом имеет например width: 1280px; то по идеи логически мы ждем
,что и "дочерний" будет такойже ширины,НО! при добавлении "дочерниму" padding например 50px для внутреннего стеснения то padding
плюсуется к общей величине и размер дочернего станет 1380! что бы этого избежать есть замечательное св-во box-sizing с методом
border-box; !!!


    Важно! *Убираем margin у всех элиментов в верстке в ИНДИВИДУАЛЬНОМ порядке! 
    Подход с универсальным селектором *{...} может дать сбой,не допустимо!

    Важно! *Если мы хотим сказать блоку что-бы высота задовалась по содержимому несмотря на элименты внутри блока со стилями 
    float: left или float: right; . Берем его class=".class" и используем псевдоэлемент! 
    .class:after { // after-идущий после.
       content: "";
       display: block;
       width: 100%;
       clear: both;
    } Заметка* этот подход используется ОЧЕНЬ ЧАСТО в веб-разработке!
    
    Важно! *Ели используем выравнивание element в блоке по средству margin-top:(как правильно это margin:1 0 0 0) или 
    margin-position:(как правильно это margin:0 0 1 0). то ИСПОЛЬЗУЕМ один метод для всех элементов!

//---------------------------------------------------------------------------------------------------------------------------------------||

//=======================================================================================================================================||
Разбор первого блока.
Несмотря на симатику первым создается <div class="container"></div> с классом в котором задоется основа глобалного размера и центровка.
.container {
    width: 1900px; например.
    margin: 0 auto; центровка.
    outline: 1px solid black; обводка для удобства работы (потом убирается).
} 
Работа со списком,детали:
Добавление няшек перед списком(галочки качаем с макета): используем псевдоэлемент :before-идущий перед.
Пример:
.main-header-list li:before {// before-идущий перед в нашем случае перед li
    content: "";
    display: block; что бы двигать должен быть блочным,теперь можно завести размеры.
    width: 25px;
    height: 19px;
    outline: 1px solid black; для наглядности.
    position: absolute;// Теперь открыт доступ к включению расположения элемента.Родителю задаем position: relative;
    top: ;             // Зодителем является все что стоит перед .main-header-list li:before то есть .main-header-list li
    left: ;
}

